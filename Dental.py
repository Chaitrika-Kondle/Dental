# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IOnwIpqiMO0ZSkrD5xbh0yA1eLkzJgDN
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install tensorflow

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import os

# Define image dimensions and batch size
img_width, img_height = 200, 200
batch_size = 16

# Data generators with augmentation for training and validation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2  # 80% for training, 20% for validation
)

train_dataset = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/02divididas_aumentadas',
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical',  # Change to categorical
    subset='training'  # Set as training dataset
)

validation_dataset = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/02divididas_aumentadas',
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical',  # Change to categorical
    subset='validation'  # Set as validation dataset
)

# Build the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)),
    tf.keras.layers.MaxPool2D(2, 2),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPool2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPool2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')  # Change to 3 units and softmax activation for three classes
])

# Compile the model
model.compile(loss='categorical_crossentropy',  # Change to categorical_crossentropy
              optimizer=RMSprop(lr=0.001),
              metrics=['accuracy'])

# Train the model
history = model.fit(train_dataset,
                    steps_per_epoch=train_dataset.samples // batch_size,
                    epochs=50,
                    validation_data=validation_dataset,
                    validation_steps=validation_dataset.samples // batch_size)

# Plot the training history
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(1, len(acc) + 1)

plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')

plt.show()

# Make predictions on test images
dir_path = '/content/drive/MyDrive/02divididas_aumentadas/03_test/moderada'

for i in os.listdir(dir_path):
    img_path = os.path.join(dir_path, i)
    img = image.load_img(img_path,target_size=(200,200))
    plt.imshow(img)
    plt.show()
    img = tf.keras.preprocessing.image.load_img(img_path, target_size=(img_width, img_height))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)

    predictions = model.predict(img_array)
    predicted_class = tf.argmax(predictions[0]).numpy()

    print(f"Image: {i}, Predicted Class: {predicted_class}")